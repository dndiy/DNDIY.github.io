---
// FriendPostCard.astro
// This component displays a friend's post in the blog list

export interface Props {
  post: {
    id: string;
    title: string;
    description?: string;
    published: string;
    updated?: string;
    sourceUrl?: string;
    tags?: string[];
    friendName?: string;
    friendUrl?: string;
    friendAvatar?: string;
  };
}

const { post } = Astro.props;

// Format date
function formatDate(dateString) {
  if (!dateString) return '';
  
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Format relative time (e.g., "2 days ago")
function getRelativeTime(dateString) {
  if (!dateString) return '';
  
  const date = new Date(dateString);
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  
  if (diffDays < 1) return 'Today';
  if (diffDays === 1) return 'Yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
  if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;
  return `${Math.floor(diffDays / 365)} years ago`;
}
---

<div class="card-base p-4 rounded-lg hover:shadow-md transition-shadow border-l-4 border-l-[var(--primary)]">
  <!-- Friend Attribution -->
  {post.friendName && (
    <div class="flex items-center mb-2">
      <div class="w-6 h-6 bg-neutral-200 dark:bg-neutral-700 rounded-full overflow-hidden mr-2 flex-shrink-0">
        <img 
          src={post.friendAvatar || '/images/default-avatar.png'} 
          alt={`${post.friendName}'s avatar`}
          class="w-full h-full object-cover"
          onerror="this.src='/images/default-avatar.png'"
        />
      </div>
      <span class="text-xs text-neutral-500 dark:text-neutral-400">
        Shared from <a href={post.friendUrl} target="_blank" rel="noopener noreferrer" class="text-[var(--primary)] hover:underline">{post.friendName}</a>
      </span>
    </div>
  )}
  
  <!-- Post Title -->
  <h3 class="text-lg font-bold mb-2 text-black/80 dark:text-white/80 line-clamp-2">
    <a href={post.sourceUrl} target="_blank" rel="noopener noreferrer" class="hover:text-[var(--primary)] transition">
      {post.title}
    </a>
  </h3>
  
  <!-- Post Description -->
  {post.description && (
    <p class="text-neutral-600 dark:text-neutral-300 text-sm mb-3 line-clamp-3">
      {post.description}
    </p>
  )}
  
  <!-- Post Metadata -->
  <div class="flex items-center justify-between text-xs text-neutral-500 dark:text-neutral-400">
    <div class="flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <polyline points="12 6 12 12 16 14"></polyline>
      </svg>
      <span title={formatDate(post.published)}>{getRelativeTime(post.published)}</span>
    </div>
    
    <!-- Tags (if available) -->
    {post.tags && post.tags.length > 0 && (
      <div class="flex flex-wrap gap-1">
        {post.tags.slice(0, 2).map(tag => (
          <span class="px-2 py-0.5 bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-300 rounded-full">
            {tag}
          </span>
        ))}
        {post.tags.length > 2 && (
          <span class="px-2 py-0.5 bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-300 rounded-full">
            +{post.tags.length - 2}
          </span>
        )}
      </div>
    )}
  </div>
</div>